# Reproducible Desktop Setup Configuration (TOML format)
# This replaces the .env file for better structure and maintainability.
# Arrays and nested structures are natively supported.

# Supported distributions: "fedora", "debian" (includes Ubuntu)
distro = "fedora"

[system]
hostname = "whitespace"
enable_amd_gpu = true
enable_rpm_fusion = true

# Drive mounting configuration - setup early in the process
[[drives]]
device = "/dev/sda1"
mount_point = "/mnt/data"
encrypted = true
filesystem = "ext4"
label = "data"
force_update = true

[desktop]
environment = "cosmic-desktop"
packages = ["cosmic-desktop-apps"]
display_manager = "gdm"

[flatpak]
[[flatpak.remotes]]
name = "flathub"
url = "https://flathub.org/repo/flathub.flatpakrepo"

[podman]
pre_container_setup = [
    { description = "Create LibreWolf config directory", command = "mkdir -p $HOME/.config/librewolf" },
    { description = "Create Chrome config directory", command = "mkdir -p $HOME/.config/chrome" },
    { description = "Create NextCloud config directory", command = "mkdir -p $HOME/.config/nextcloud"},
    { description = "Create Downloads directory for containers", command = "mkdir -p $HOME/Downloads/ContainerDownloads" },
    { description = "Create base data directory", command = "sudo mkdir -p /mnt/data" },
    { description = "Create Jellyfin config directory", command = "sudo mkdir -p /mnt/data/jellyfin/config" },
    { description = "Create Jellyfin TV/movie directories", command = "sudo mkdir -p /mnt/data/jellyfin/tvshows /mnt/data/jellyfin/movies" },
    { description = "Set Jellyfin ownership", command = "sudo chown -R 525287:525287 /mnt/data/jellyfin" },
    { description = "Create RetroArch directories", command = "sudo mkdir -p /mnt/data/retroarch/config /mnt/data/retroarch/roms" },
    { description = "Set RetroArch ownership", command = "sudo chown -R 525287:525287 /mnt/data/retroarch" },
    { description = "Create Dolphin directories", command = "sudo mkdir -p /mnt/data/dolphin/config /mnt/data/dolphin/roms" },
    { description = "Set Dolphin ownership", command = "sudo chown -R 525287:525287 /mnt/data/dolphin" },
    { description = "Create DuckStation directories", command = "sudo mkdir -p /mnt/data/duckstation/config /mnt/data/duckstation/roms" },
    { description = "Set DuckStation ownership", command = "sudo chown -R 525287:525287 /mnt/data/duckstation" },
    { description = "Create PCSX2 directories", command = "sudo mkdir -p /mnt/data/pcsx2/config /mnt/data/pcsx2/roms" },
    { description = "Set PCSX2 ownership", command = "sudo chown -R 525287:525287 /mnt/data/pcsx2" },
    { description = "Create RPCS3 directories", command = "sudo mkdir -p /mnt/data/rpcs3/config /mnt/data/rpcs3/roms" },
    { description = "Set RPCS3 ownership", command = "sudo chown -R 525287:525287 /mnt/data/rpcs3" },
    { description = "Create Xemu directories", command = "sudo mkdir -p /mnt/data/xemu/config /mnt/data/xemu/roms" },
    { description = "Set Xemu ownership", command = "sudo chown -R 525287:525287 /mnt/data/xemu" },
    { description = "Create Mullvad Browser directories", command = "sudo mkdir -p /mnt/data/mullvad-browser/config" },
    { description = "Set Mullvad Browser ownership", command = "sudo chown -R 525287:525287 /mnt/data/mullvad-browser" }
]

[[podman.containers]]
name = "librewolf"
image = "lscr.io/linuxserver/librewolf:latest"
raw_flags = "--security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 127.0.0.1:3100:3000 -p 127.0.0.1:3101:3001 -v $HOME/.config/librewolf:/config:Z -v $HOME/Downloads/ContainerDownloads:/downloads:Z --shm-size=1gb --restart unless-stopped"
start_after_creation = true
autostart = true

[[podman.containers]]
name = "chrome"
image = "lscr.io/linuxserver/chromium:latest"
raw_flags = "--security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 127.0.0.1:3200:3000 -p 127.0.0.1:3201:3001 -v $HOME/.config/chrome:/config:Z -v $HOME/Downloads/ContainerDownloads:/downloads:Z --shm-size=1gb --restart unless-stopped"
start_after_creation = true
autostart = true

[[podman.containers]]
name = "nextcloud"
image = "lscr.io/linuxserver/nextcloud:latest"
raw_flags = "--security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 8443:443 -v $HOME/.config/nextcloud:/config:Z -v /mnt/data:/data --shm-size=1gb --restart unless-stopped"
start_after_creation = true
autostart = true

[[podman.containers]]
name = "jellyfin"
image = "lscr.io/linuxserver/jellyfin:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -e JELLYFIN_PublishedServerUrl=http://192.168.0.5 -p 8096:8096 -p 8920:8920 -p 7359:7359/udp -p 1900:1900/udp -v /mnt/data/jellyfin/config:/config:z -v /mnt/data/jellyfin/tvshows:/data/tvshows:z -v /mnt/data/jellyfin/movies:/data/movies:z --restart unless-stopped"
start_after_creation = true
autostart = true

[[podman.containers]]
name = "retroarch"
image = "lscr.io/linuxserver/retroarch:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 0.0.0.0:3300:3000 -p 0.0.0.0:3301:3001 -v /mnt/data/retroarch/config:/config:z -v /mnt/data/retroarch/roms:/data/roms:z --shm-size=1gb --restart unless-stopped"
start_after_creation = true
autostart = true

[[podman.containers]]
name = "dolphin"
image = "lscr.io/linuxserver/dolphin:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 3400:3000 -p 3401:3001 -v /mnt/data/dolphin/config:/config:z -v /mnt/data/dolphin/roms:/data/roms:z --shm-size=1gb --restart unless-stopped"
start_after_creation = false
autostart = false

[[podman.containers]]
name = "duckstation"
image = "lscr.io/linuxserver/duckstation:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 3500:3000 -p 3501:3001 -v /mnt/data/duckstation/config:/config:z -v /mnt/data/duckstation/roms:/data/roms:z --shm-size=1gb --restart unless-stopped"
start_after_creation = false
autostart = false

[[podman.containers]]
name = "pcsx2"
image = "lscr.io/linuxserver/pcsx2:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 3600:3000 -p 3601:3001 -v /mnt/data/pcsx2/config:/config:z -v /mnt/data/pcsx2/roms:/data/roms:z --shm-size=1gb --restart unless-stopped"
start_after_creation = false
autostart = false

[[podman.containers]]
name = "rpcs3"
image = "lscr.io/linuxserver/rpcs3:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 3700:3000 -p 3701:3001 -v /mnt/data/rpcs3/config:/config:z -v /mnt/data/rpcs3/roms:/data/roms:z --shm-size=1gb --restart unless-stopped"
start_after_creation = false
autostart = false

[[podman.containers]]
name = "xemu"
image = "lscr.io/linuxserver/xemu:latest"
raw_flags = "--device /dev/kfd --device /dev/dri --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 3800:3000 -p 3801:3001 -v /mnt/data/xemu/config:/config:z -v /mnt/data/xemu/roms:/data/roms:z --shm-size=1gb --restart unless-stopped"
start_after_creation = false
autostart = false

[[podman.containers]]
name = "mullvad-browser"
image = "lscr.io/linuxserver/mullvad-browser:latest"
raw_flags = "--cap-add=NET_ADMIN --security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -e LOCAL_NET=192.168.0.0/16 -p 0.0.0.0:3900:3000 -p 0.0.0.0:3901:3001 -v /mnt/data/mullvad-browser/config:/config:z --shm-size=1gb --restart unless-stopped"
start_after_creation = true
autostart = true

[[podman.containers]]
name = "open-webui"
image = "openeuler/open-webui"
raw_flags = "--security-opt seccomp=unconfined -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 0.0.0.0:8080:8080 --shm-size=1gb --restart unless-stopped"
start_after_creation = true
autostart = true


# [vpn]
# type = "wireguard"
# conf_path = "/home/iskry/Wireguard/wg0.conf"

[dotfiles]
setup_bashrc = true
setup_config_dirs = true

[custom_commands]
# Additional commands to execute in order. Use full shell commands as strings.
# Commands are executed with shell expansion, so environment variables work.
commands = []

# Example of run_once commands (only execute once, tracked via state file):
run_once = [
    "curl -f https://zed.dev/install.sh | sh",
    "curl -fsSL https://ollama.com/install.sh | sh",
    "ollama pull gpt-oss:latest",
    "ollama pull qwen2.5-coder:14b"
]
